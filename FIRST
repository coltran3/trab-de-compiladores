FIRST(S) = { a...z, A...Z, INTEIRO, QUEBRADO, LOGICO, SE, ENQUANTO}
FIRST(PROGRAMA) = { a...z, A...Z, INTEIRO, QUEBRADO, LOGICO, SE, ENQUANTO}
FIRST(PROGRAMA') = { a...z, A...Z, INTEIRO, QUEBRADO, LOGICO, SE, ENQUANTO, ε} 
FIRST(COMANDO) = { a...z, A...Z, INTEIRO, QUEBRADO, LOGICO, SE, ENQUANTO}
FIRST(STMT) = { a...z, A...Z, INTEIRO, QUEBRADO, LOGICO}
FIRST(I) = { a...z, A...Z}
FIRST(T) = { INTEIRO, QUEBRADO, LOGICO}
FIRST(X) = { SE}
FIRST(X') = { SE NÃO, ACABOU}
FIRST(E) = { ENQUANTO}
FIRST(IDENTIFICADOR) = { a...z, A...Z}
FIRST(EXPRESSÃO) = { a...z, A...Z, +, -, 0...9, (, !}
FIRST(ARITMÉTICA_LÓGICA) = { +, -, /, *, &, |, ε}
FIRST(EXPRESÃO_ARITIMÉTICA') = {+ -, /, *, ε}
FIRST(EXPRESSÃO_LÓGICA') = { &, |, ε}
FIRST(TIPO) = { INTEIRO, QUEBRADO, LOGICO}
FIRST(VALOR) = { +, -, 0...9}
FIRST(SINAL) = { +, -, ε}
FIRST(N) = { 0...9, ε}
FIRST(CASA_DECIMAL) = { ,, ε}
FIRST(LETRA_OU_NUMERO) = { a...z, A...Z, 0...9, ε}
FIRST(E_OU) = { &, |}
FIRST(NEGACAO) = { !}
FIRST(OPA) = { + | - | / | *}
FIRST(LETRA) = { a...z, A...Z}
FIRST(NUMERO) = { 0...9}



EXPRESSÃO -> [IDENTIFICADOR][ARITMÉTICA_LÓGICA] | [VALOR][ARITMÉTICA_LÓGICA] | ([EXPRESSÃO])[ARITMÉTICA_LÓGICA] | [NEGACÃO][EXPRESSÃO][ARITMÉTICA_LÓGICA]
ARITMÉTICA_LÓGICA -> [EXPRESÃO_ARITIMÉTICA'][EXPRESSÃO_LÓGICA']
EXPRESÃO_ARITIMÉTICA' -> [OPA] [EXPRESSÃO][EXPRESSÃO_ARITIMÉTICA'] | ε
EXPRESSÃO_LÓGICA' -> [E_OU] [EXPRESSÃO][EXPRESSÃO_LÓGICA'] | ε